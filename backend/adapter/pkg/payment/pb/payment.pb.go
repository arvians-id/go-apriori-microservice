// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.28.1
// 	protoc        v3.21.9
// source: adapter/pkg/payment/pb/payment.proto

package pb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type Payment struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	IdPayload         int64   `protobuf:"varint,1,opt,name=IdPayload,proto3" json:"IdPayload,omitempty"`
	UserId            int64   `protobuf:"varint,2,opt,name=UserId,proto3" json:"UserId,omitempty"`
	OrderId           *string `protobuf:"bytes,3,opt,name=OrderId,proto3,oneof" json:"OrderId,omitempty"`
	TransactionTime   *string `protobuf:"bytes,4,opt,name=TransactionTime,proto3,oneof" json:"TransactionTime,omitempty"`
	TransactionStatus *string `protobuf:"bytes,5,opt,name=TransactionStatus,proto3,oneof" json:"TransactionStatus,omitempty"`
	TransactionId     *string `protobuf:"bytes,6,opt,name=TransactionId,proto3,oneof" json:"TransactionId,omitempty"`
	StatusCode        *string `protobuf:"bytes,7,opt,name=StatusCode,proto3,oneof" json:"StatusCode,omitempty"`
	SignatureKey      *string `protobuf:"bytes,8,opt,name=SignatureKey,proto3,oneof" json:"SignatureKey,omitempty"`
	SettlementTime    *string `protobuf:"bytes,9,opt,name=SettlementTime,proto3,oneof" json:"SettlementTime,omitempty"`
	PaymentType       *string `protobuf:"bytes,10,opt,name=PaymentType,proto3,oneof" json:"PaymentType,omitempty"`
	MerchantId        *string `protobuf:"bytes,11,opt,name=MerchantId,proto3,oneof" json:"MerchantId,omitempty"`
	GrossAmount       *string `protobuf:"bytes,12,opt,name=GrossAmount,proto3,oneof" json:"GrossAmount,omitempty"`
	FraudStatus       *string `protobuf:"bytes,13,opt,name=FraudStatus,proto3,oneof" json:"FraudStatus,omitempty"`
	BankType          *string `protobuf:"bytes,14,opt,name=BankType,proto3,oneof" json:"BankType,omitempty"`
	VANumber          *string `protobuf:"bytes,15,opt,name=VANumber,proto3,oneof" json:"VANumber,omitempty"`
	BillerCode        *string `protobuf:"bytes,16,opt,name=BillerCode,proto3,oneof" json:"BillerCode,omitempty"`
	BillKey           *string `protobuf:"bytes,17,opt,name=BillKey,proto3,oneof" json:"BillKey,omitempty"`
	ReceiptNumber     *string `protobuf:"bytes,18,opt,name=ReceiptNumber,proto3,oneof" json:"ReceiptNumber,omitempty"`
	Address           *string `protobuf:"bytes,19,opt,name=Address,proto3,oneof" json:"Address,omitempty"`
	Courier           *string `protobuf:"bytes,20,opt,name=Courier,proto3,oneof" json:"Courier,omitempty"`
	CourierService    *string `protobuf:"bytes,21,opt,name=CourierService,proto3,oneof" json:"CourierService,omitempty"`
}

func (x *Payment) Reset() {
	*x = Payment{}
	if protoimpl.UnsafeEnabled {
		mi := &file_adapter_pkg_payment_pb_payment_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Payment) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Payment) ProtoMessage() {}

func (x *Payment) ProtoReflect() protoreflect.Message {
	mi := &file_adapter_pkg_payment_pb_payment_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Payment.ProtoReflect.Descriptor instead.
func (*Payment) Descriptor() ([]byte, []int) {
	return file_adapter_pkg_payment_pb_payment_proto_rawDescGZIP(), []int{0}
}

func (x *Payment) GetIdPayload() int64 {
	if x != nil {
		return x.IdPayload
	}
	return 0
}

func (x *Payment) GetUserId() int64 {
	if x != nil {
		return x.UserId
	}
	return 0
}

func (x *Payment) GetOrderId() string {
	if x != nil && x.OrderId != nil {
		return *x.OrderId
	}
	return ""
}

func (x *Payment) GetTransactionTime() string {
	if x != nil && x.TransactionTime != nil {
		return *x.TransactionTime
	}
	return ""
}

func (x *Payment) GetTransactionStatus() string {
	if x != nil && x.TransactionStatus != nil {
		return *x.TransactionStatus
	}
	return ""
}

func (x *Payment) GetTransactionId() string {
	if x != nil && x.TransactionId != nil {
		return *x.TransactionId
	}
	return ""
}

func (x *Payment) GetStatusCode() string {
	if x != nil && x.StatusCode != nil {
		return *x.StatusCode
	}
	return ""
}

func (x *Payment) GetSignatureKey() string {
	if x != nil && x.SignatureKey != nil {
		return *x.SignatureKey
	}
	return ""
}

func (x *Payment) GetSettlementTime() string {
	if x != nil && x.SettlementTime != nil {
		return *x.SettlementTime
	}
	return ""
}

func (x *Payment) GetPaymentType() string {
	if x != nil && x.PaymentType != nil {
		return *x.PaymentType
	}
	return ""
}

func (x *Payment) GetMerchantId() string {
	if x != nil && x.MerchantId != nil {
		return *x.MerchantId
	}
	return ""
}

func (x *Payment) GetGrossAmount() string {
	if x != nil && x.GrossAmount != nil {
		return *x.GrossAmount
	}
	return ""
}

func (x *Payment) GetFraudStatus() string {
	if x != nil && x.FraudStatus != nil {
		return *x.FraudStatus
	}
	return ""
}

func (x *Payment) GetBankType() string {
	if x != nil && x.BankType != nil {
		return *x.BankType
	}
	return ""
}

func (x *Payment) GetVANumber() string {
	if x != nil && x.VANumber != nil {
		return *x.VANumber
	}
	return ""
}

func (x *Payment) GetBillerCode() string {
	if x != nil && x.BillerCode != nil {
		return *x.BillerCode
	}
	return ""
}

func (x *Payment) GetBillKey() string {
	if x != nil && x.BillKey != nil {
		return *x.BillKey
	}
	return ""
}

func (x *Payment) GetReceiptNumber() string {
	if x != nil && x.ReceiptNumber != nil {
		return *x.ReceiptNumber
	}
	return ""
}

func (x *Payment) GetAddress() string {
	if x != nil && x.Address != nil {
		return *x.Address
	}
	return ""
}

func (x *Payment) GetCourier() string {
	if x != nil && x.Courier != nil {
		return *x.Courier
	}
	return ""
}

func (x *Payment) GetCourierService() string {
	if x != nil && x.CourierService != nil {
		return *x.CourierService
	}
	return ""
}

type ListPaymentResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Payment []*Payment `protobuf:"bytes,1,rep,name=payment,proto3" json:"payment,omitempty"`
}

func (x *ListPaymentResponse) Reset() {
	*x = ListPaymentResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_adapter_pkg_payment_pb_payment_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListPaymentResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListPaymentResponse) ProtoMessage() {}

func (x *ListPaymentResponse) ProtoReflect() protoreflect.Message {
	mi := &file_adapter_pkg_payment_pb_payment_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListPaymentResponse.ProtoReflect.Descriptor instead.
func (*ListPaymentResponse) Descriptor() ([]byte, []int) {
	return file_adapter_pkg_payment_pb_payment_proto_rawDescGZIP(), []int{1}
}

func (x *ListPaymentResponse) GetPayment() []*Payment {
	if x != nil {
		return x.Payment
	}
	return nil
}

type GetPaymentResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Payment *Payment `protobuf:"bytes,1,opt,name=payment,proto3" json:"payment,omitempty"`
}

func (x *GetPaymentResponse) Reset() {
	*x = GetPaymentResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_adapter_pkg_payment_pb_payment_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetPaymentResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetPaymentResponse) ProtoMessage() {}

func (x *GetPaymentResponse) ProtoReflect() protoreflect.Message {
	mi := &file_adapter_pkg_payment_pb_payment_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetPaymentResponse.ProtoReflect.Descriptor instead.
func (*GetPaymentResponse) Descriptor() ([]byte, []int) {
	return file_adapter_pkg_payment_pb_payment_proto_rawDescGZIP(), []int{2}
}

func (x *GetPaymentResponse) GetPayment() *Payment {
	if x != nil {
		return x.Payment
	}
	return nil
}

type GetPaymentByUserIdRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserId int64 `protobuf:"varint,1,opt,name=UserId,proto3" json:"UserId,omitempty"`
}

func (x *GetPaymentByUserIdRequest) Reset() {
	*x = GetPaymentByUserIdRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_adapter_pkg_payment_pb_payment_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetPaymentByUserIdRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetPaymentByUserIdRequest) ProtoMessage() {}

func (x *GetPaymentByUserIdRequest) ProtoReflect() protoreflect.Message {
	mi := &file_adapter_pkg_payment_pb_payment_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetPaymentByUserIdRequest.ProtoReflect.Descriptor instead.
func (*GetPaymentByUserIdRequest) Descriptor() ([]byte, []int) {
	return file_adapter_pkg_payment_pb_payment_proto_rawDescGZIP(), []int{3}
}

func (x *GetPaymentByUserIdRequest) GetUserId() int64 {
	if x != nil {
		return x.UserId
	}
	return 0
}

type GetPaymentByOrderIdRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	OrderId string `protobuf:"bytes,1,opt,name=OrderId,proto3" json:"OrderId,omitempty"`
}

func (x *GetPaymentByOrderIdRequest) Reset() {
	*x = GetPaymentByOrderIdRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_adapter_pkg_payment_pb_payment_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetPaymentByOrderIdRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetPaymentByOrderIdRequest) ProtoMessage() {}

func (x *GetPaymentByOrderIdRequest) ProtoReflect() protoreflect.Message {
	mi := &file_adapter_pkg_payment_pb_payment_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetPaymentByOrderIdRequest.ProtoReflect.Descriptor instead.
func (*GetPaymentByOrderIdRequest) Descriptor() ([]byte, []int) {
	return file_adapter_pkg_payment_pb_payment_proto_rawDescGZIP(), []int{4}
}

func (x *GetPaymentByOrderIdRequest) GetOrderId() string {
	if x != nil {
		return x.OrderId
	}
	return ""
}

type GetCreatePaymentResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	IsSuccess bool `protobuf:"varint,1,opt,name=IsSuccess,proto3" json:"IsSuccess,omitempty"`
}

func (x *GetCreatePaymentResponse) Reset() {
	*x = GetCreatePaymentResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_adapter_pkg_payment_pb_payment_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetCreatePaymentResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetCreatePaymentResponse) ProtoMessage() {}

func (x *GetCreatePaymentResponse) ProtoReflect() protoreflect.Message {
	mi := &file_adapter_pkg_payment_pb_payment_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetCreatePaymentResponse.ProtoReflect.Descriptor instead.
func (*GetCreatePaymentResponse) Descriptor() ([]byte, []int) {
	return file_adapter_pkg_payment_pb_payment_proto_rawDescGZIP(), []int{5}
}

func (x *GetCreatePaymentResponse) GetIsSuccess() bool {
	if x != nil {
		return x.IsSuccess
	}
	return false
}

type CreatePaymentRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Payment []byte `protobuf:"bytes,1,opt,name=payment,proto3" json:"payment,omitempty"`
}

func (x *CreatePaymentRequest) Reset() {
	*x = CreatePaymentRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_adapter_pkg_payment_pb_payment_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreatePaymentRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreatePaymentRequest) ProtoMessage() {}

func (x *CreatePaymentRequest) ProtoReflect() protoreflect.Message {
	mi := &file_adapter_pkg_payment_pb_payment_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreatePaymentRequest.ProtoReflect.Descriptor instead.
func (*CreatePaymentRequest) Descriptor() ([]byte, []int) {
	return file_adapter_pkg_payment_pb_payment_proto_rawDescGZIP(), []int{6}
}

func (x *CreatePaymentRequest) GetPayment() []byte {
	if x != nil {
		return x.Payment
	}
	return nil
}

type GetPaymentTokenResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Payment map[string]string `protobuf:"bytes,1,rep,name=payment,proto3" json:"payment,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (x *GetPaymentTokenResponse) Reset() {
	*x = GetPaymentTokenResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_adapter_pkg_payment_pb_payment_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetPaymentTokenResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetPaymentTokenResponse) ProtoMessage() {}

func (x *GetPaymentTokenResponse) ProtoReflect() protoreflect.Message {
	mi := &file_adapter_pkg_payment_pb_payment_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetPaymentTokenResponse.ProtoReflect.Descriptor instead.
func (*GetPaymentTokenResponse) Descriptor() ([]byte, []int) {
	return file_adapter_pkg_payment_pb_payment_proto_rawDescGZIP(), []int{7}
}

func (x *GetPaymentTokenResponse) GetPayment() map[string]string {
	if x != nil {
		return x.Payment
	}
	return nil
}

type UpdateReceiptNumberRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	OrderId       string `protobuf:"bytes,1,opt,name=OrderId,proto3" json:"OrderId,omitempty"`
	ReceiptNumber string `protobuf:"bytes,2,opt,name=ReceiptNumber,proto3" json:"ReceiptNumber,omitempty"`
}

func (x *UpdateReceiptNumberRequest) Reset() {
	*x = UpdateReceiptNumberRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_adapter_pkg_payment_pb_payment_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateReceiptNumberRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateReceiptNumberRequest) ProtoMessage() {}

func (x *UpdateReceiptNumberRequest) ProtoReflect() protoreflect.Message {
	mi := &file_adapter_pkg_payment_pb_payment_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateReceiptNumberRequest.ProtoReflect.Descriptor instead.
func (*UpdateReceiptNumberRequest) Descriptor() ([]byte, []int) {
	return file_adapter_pkg_payment_pb_payment_proto_rawDescGZIP(), []int{8}
}

func (x *UpdateReceiptNumberRequest) GetOrderId() string {
	if x != nil {
		return x.OrderId
	}
	return ""
}

func (x *UpdateReceiptNumberRequest) GetReceiptNumber() string {
	if x != nil {
		return x.ReceiptNumber
	}
	return ""
}

type GetPaymentTokenRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	GrossAmount    int64    `protobuf:"varint,1,opt,name=GrossAmount,proto3" json:"GrossAmount,omitempty"`
	Items          []string `protobuf:"bytes,2,rep,name=Items,proto3" json:"Items,omitempty"`
	UserId         int64    `protobuf:"varint,3,opt,name=UserId,proto3" json:"UserId,omitempty"`
	CustomerName   string   `protobuf:"bytes,4,opt,name=CustomerName,proto3" json:"CustomerName,omitempty"`
	Address        string   `protobuf:"bytes,5,opt,name=Address,proto3" json:"Address,omitempty"`
	Courier        string   `protobuf:"bytes,6,opt,name=Courier,proto3" json:"Courier,omitempty"`
	CourierService string   `protobuf:"bytes,7,opt,name=CourierService,proto3" json:"CourierService,omitempty"`
	ShippingCost   int64    `protobuf:"varint,8,opt,name=ShippingCost,proto3" json:"ShippingCost,omitempty"`
}

func (x *GetPaymentTokenRequest) Reset() {
	*x = GetPaymentTokenRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_adapter_pkg_payment_pb_payment_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetPaymentTokenRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetPaymentTokenRequest) ProtoMessage() {}

func (x *GetPaymentTokenRequest) ProtoReflect() protoreflect.Message {
	mi := &file_adapter_pkg_payment_pb_payment_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetPaymentTokenRequest.ProtoReflect.Descriptor instead.
func (*GetPaymentTokenRequest) Descriptor() ([]byte, []int) {
	return file_adapter_pkg_payment_pb_payment_proto_rawDescGZIP(), []int{9}
}

func (x *GetPaymentTokenRequest) GetGrossAmount() int64 {
	if x != nil {
		return x.GrossAmount
	}
	return 0
}

func (x *GetPaymentTokenRequest) GetItems() []string {
	if x != nil {
		return x.Items
	}
	return nil
}

func (x *GetPaymentTokenRequest) GetUserId() int64 {
	if x != nil {
		return x.UserId
	}
	return 0
}

func (x *GetPaymentTokenRequest) GetCustomerName() string {
	if x != nil {
		return x.CustomerName
	}
	return ""
}

func (x *GetPaymentTokenRequest) GetAddress() string {
	if x != nil {
		return x.Address
	}
	return ""
}

func (x *GetPaymentTokenRequest) GetCourier() string {
	if x != nil {
		return x.Courier
	}
	return ""
}

func (x *GetPaymentTokenRequest) GetCourierService() string {
	if x != nil {
		return x.CourierService
	}
	return ""
}

func (x *GetPaymentTokenRequest) GetShippingCost() int64 {
	if x != nil {
		return x.ShippingCost
	}
	return 0
}

var File_adapter_pkg_payment_pb_payment_proto protoreflect.FileDescriptor

var file_adapter_pkg_payment_pb_payment_proto_rawDesc = []byte{
	0x0a, 0x24, 0x61, 0x64, 0x61, 0x70, 0x74, 0x65, 0x72, 0x2f, 0x70, 0x6b, 0x67, 0x2f, 0x70, 0x61,
	0x79, 0x6d, 0x65, 0x6e, 0x74, 0x2f, 0x70, 0x62, 0x2f, 0x70, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x07, 0x70, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x1a,
	0x1b, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66,
	0x2f, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0xc8, 0x08, 0x0a,
	0x07, 0x50, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x12, 0x1c, 0x0a, 0x09, 0x49, 0x64, 0x50, 0x61,
	0x79, 0x6c, 0x6f, 0x61, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x49, 0x64, 0x50,
	0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x12, 0x16, 0x0a, 0x06, 0x55, 0x73, 0x65, 0x72, 0x49, 0x64,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x06, 0x55, 0x73, 0x65, 0x72, 0x49, 0x64, 0x12, 0x1d,
	0x0a, 0x07, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x49, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x48,
	0x00, 0x52, 0x07, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x49, 0x64, 0x88, 0x01, 0x01, 0x12, 0x2d, 0x0a,
	0x0f, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x69, 0x6d, 0x65,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x48, 0x01, 0x52, 0x0f, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x69, 0x6d, 0x65, 0x88, 0x01, 0x01, 0x12, 0x31, 0x0a, 0x11,
	0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x74, 0x61, 0x74, 0x75,
	0x73, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x48, 0x02, 0x52, 0x11, 0x54, 0x72, 0x61, 0x6e, 0x73,
	0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x88, 0x01, 0x01, 0x12,
	0x29, 0x0a, 0x0d, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64,
	0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x48, 0x03, 0x52, 0x0d, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x88, 0x01, 0x01, 0x12, 0x23, 0x0a, 0x0a, 0x53, 0x74,
	0x61, 0x74, 0x75, 0x73, 0x43, 0x6f, 0x64, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x48, 0x04,
	0x52, 0x0a, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x43, 0x6f, 0x64, 0x65, 0x88, 0x01, 0x01, 0x12,
	0x27, 0x0a, 0x0c, 0x53, 0x69, 0x67, 0x6e, 0x61, 0x74, 0x75, 0x72, 0x65, 0x4b, 0x65, 0x79, 0x18,
	0x08, 0x20, 0x01, 0x28, 0x09, 0x48, 0x05, 0x52, 0x0c, 0x53, 0x69, 0x67, 0x6e, 0x61, 0x74, 0x75,
	0x72, 0x65, 0x4b, 0x65, 0x79, 0x88, 0x01, 0x01, 0x12, 0x2b, 0x0a, 0x0e, 0x53, 0x65, 0x74, 0x74,
	0x6c, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09,
	0x48, 0x06, 0x52, 0x0e, 0x53, 0x65, 0x74, 0x74, 0x6c, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x54, 0x69,
	0x6d, 0x65, 0x88, 0x01, 0x01, 0x12, 0x25, 0x0a, 0x0b, 0x50, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74,
	0x54, 0x79, 0x70, 0x65, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x48, 0x07, 0x52, 0x0b, 0x50, 0x61,
	0x79, 0x6d, 0x65, 0x6e, 0x74, 0x54, 0x79, 0x70, 0x65, 0x88, 0x01, 0x01, 0x12, 0x23, 0x0a, 0x0a,
	0x4d, 0x65, 0x72, 0x63, 0x68, 0x61, 0x6e, 0x74, 0x49, 0x64, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x09,
	0x48, 0x08, 0x52, 0x0a, 0x4d, 0x65, 0x72, 0x63, 0x68, 0x61, 0x6e, 0x74, 0x49, 0x64, 0x88, 0x01,
	0x01, 0x12, 0x25, 0x0a, 0x0b, 0x47, 0x72, 0x6f, 0x73, 0x73, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74,
	0x18, 0x0c, 0x20, 0x01, 0x28, 0x09, 0x48, 0x09, 0x52, 0x0b, 0x47, 0x72, 0x6f, 0x73, 0x73, 0x41,
	0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x88, 0x01, 0x01, 0x12, 0x25, 0x0a, 0x0b, 0x46, 0x72, 0x61, 0x75,
	0x64, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x09, 0x48, 0x0a, 0x52,
	0x0b, 0x46, 0x72, 0x61, 0x75, 0x64, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x88, 0x01, 0x01, 0x12,
	0x1f, 0x0a, 0x08, 0x42, 0x61, 0x6e, 0x6b, 0x54, 0x79, 0x70, 0x65, 0x18, 0x0e, 0x20, 0x01, 0x28,
	0x09, 0x48, 0x0b, 0x52, 0x08, 0x42, 0x61, 0x6e, 0x6b, 0x54, 0x79, 0x70, 0x65, 0x88, 0x01, 0x01,
	0x12, 0x1f, 0x0a, 0x08, 0x56, 0x41, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x18, 0x0f, 0x20, 0x01,
	0x28, 0x09, 0x48, 0x0c, 0x52, 0x08, 0x56, 0x41, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x88, 0x01,
	0x01, 0x12, 0x23, 0x0a, 0x0a, 0x42, 0x69, 0x6c, 0x6c, 0x65, 0x72, 0x43, 0x6f, 0x64, 0x65, 0x18,
	0x10, 0x20, 0x01, 0x28, 0x09, 0x48, 0x0d, 0x52, 0x0a, 0x42, 0x69, 0x6c, 0x6c, 0x65, 0x72, 0x43,
	0x6f, 0x64, 0x65, 0x88, 0x01, 0x01, 0x12, 0x1d, 0x0a, 0x07, 0x42, 0x69, 0x6c, 0x6c, 0x4b, 0x65,
	0x79, 0x18, 0x11, 0x20, 0x01, 0x28, 0x09, 0x48, 0x0e, 0x52, 0x07, 0x42, 0x69, 0x6c, 0x6c, 0x4b,
	0x65, 0x79, 0x88, 0x01, 0x01, 0x12, 0x29, 0x0a, 0x0d, 0x52, 0x65, 0x63, 0x65, 0x69, 0x70, 0x74,
	0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x18, 0x12, 0x20, 0x01, 0x28, 0x09, 0x48, 0x0f, 0x52, 0x0d,
	0x52, 0x65, 0x63, 0x65, 0x69, 0x70, 0x74, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x88, 0x01, 0x01,
	0x12, 0x1d, 0x0a, 0x07, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x13, 0x20, 0x01, 0x28,
	0x09, 0x48, 0x10, 0x52, 0x07, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x88, 0x01, 0x01, 0x12,
	0x1d, 0x0a, 0x07, 0x43, 0x6f, 0x75, 0x72, 0x69, 0x65, 0x72, 0x18, 0x14, 0x20, 0x01, 0x28, 0x09,
	0x48, 0x11, 0x52, 0x07, 0x43, 0x6f, 0x75, 0x72, 0x69, 0x65, 0x72, 0x88, 0x01, 0x01, 0x12, 0x2b,
	0x0a, 0x0e, 0x43, 0x6f, 0x75, 0x72, 0x69, 0x65, 0x72, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65,
	0x18, 0x15, 0x20, 0x01, 0x28, 0x09, 0x48, 0x12, 0x52, 0x0e, 0x43, 0x6f, 0x75, 0x72, 0x69, 0x65,
	0x72, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x88, 0x01, 0x01, 0x42, 0x0a, 0x0a, 0x08, 0x5f,
	0x4f, 0x72, 0x64, 0x65, 0x72, 0x49, 0x64, 0x42, 0x12, 0x0a, 0x10, 0x5f, 0x54, 0x72, 0x61, 0x6e,
	0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x69, 0x6d, 0x65, 0x42, 0x14, 0x0a, 0x12, 0x5f,
	0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x74, 0x61, 0x74, 0x75,
	0x73, 0x42, 0x10, 0x0a, 0x0e, 0x5f, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x49, 0x64, 0x42, 0x0d, 0x0a, 0x0b, 0x5f, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x43, 0x6f,
	0x64, 0x65, 0x42, 0x0f, 0x0a, 0x0d, 0x5f, 0x53, 0x69, 0x67, 0x6e, 0x61, 0x74, 0x75, 0x72, 0x65,
	0x4b, 0x65, 0x79, 0x42, 0x11, 0x0a, 0x0f, 0x5f, 0x53, 0x65, 0x74, 0x74, 0x6c, 0x65, 0x6d, 0x65,
	0x6e, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x42, 0x0e, 0x0a, 0x0c, 0x5f, 0x50, 0x61, 0x79, 0x6d, 0x65,
	0x6e, 0x74, 0x54, 0x79, 0x70, 0x65, 0x42, 0x0d, 0x0a, 0x0b, 0x5f, 0x4d, 0x65, 0x72, 0x63, 0x68,
	0x61, 0x6e, 0x74, 0x49, 0x64, 0x42, 0x0e, 0x0a, 0x0c, 0x5f, 0x47, 0x72, 0x6f, 0x73, 0x73, 0x41,
	0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x42, 0x0e, 0x0a, 0x0c, 0x5f, 0x46, 0x72, 0x61, 0x75, 0x64, 0x53,
	0x74, 0x61, 0x74, 0x75, 0x73, 0x42, 0x0b, 0x0a, 0x09, 0x5f, 0x42, 0x61, 0x6e, 0x6b, 0x54, 0x79,
	0x70, 0x65, 0x42, 0x0b, 0x0a, 0x09, 0x5f, 0x56, 0x41, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x42,
	0x0d, 0x0a, 0x0b, 0x5f, 0x42, 0x69, 0x6c, 0x6c, 0x65, 0x72, 0x43, 0x6f, 0x64, 0x65, 0x42, 0x0a,
	0x0a, 0x08, 0x5f, 0x42, 0x69, 0x6c, 0x6c, 0x4b, 0x65, 0x79, 0x42, 0x10, 0x0a, 0x0e, 0x5f, 0x52,
	0x65, 0x63, 0x65, 0x69, 0x70, 0x74, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x42, 0x0a, 0x0a, 0x08,
	0x5f, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x42, 0x0a, 0x0a, 0x08, 0x5f, 0x43, 0x6f, 0x75,
	0x72, 0x69, 0x65, 0x72, 0x42, 0x11, 0x0a, 0x0f, 0x5f, 0x43, 0x6f, 0x75, 0x72, 0x69, 0x65, 0x72,
	0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x22, 0x41, 0x0a, 0x13, 0x4c, 0x69, 0x73, 0x74, 0x50,
	0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x2a,
	0x0a, 0x07, 0x70, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x10, 0x2e, 0x70, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x2e, 0x50, 0x61, 0x79, 0x6d, 0x65, 0x6e,
	0x74, 0x52, 0x07, 0x70, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x22, 0x40, 0x0a, 0x12, 0x47, 0x65,
	0x74, 0x50, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x12, 0x2a, 0x0a, 0x07, 0x70, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x10, 0x2e, 0x70, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x2e, 0x50, 0x61, 0x79, 0x6d,
	0x65, 0x6e, 0x74, 0x52, 0x07, 0x70, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x22, 0x33, 0x0a, 0x19,
	0x47, 0x65, 0x74, 0x50, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x42, 0x79, 0x55, 0x73, 0x65, 0x72,
	0x49, 0x64, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x16, 0x0a, 0x06, 0x55, 0x73, 0x65,
	0x72, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x06, 0x55, 0x73, 0x65, 0x72, 0x49,
	0x64, 0x22, 0x36, 0x0a, 0x1a, 0x47, 0x65, 0x74, 0x50, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x42,
	0x79, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x49, 0x64, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12,
	0x18, 0x0a, 0x07, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x07, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x49, 0x64, 0x22, 0x38, 0x0a, 0x18, 0x47, 0x65, 0x74,
	0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x50, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x49, 0x73, 0x53, 0x75, 0x63, 0x63, 0x65,
	0x73, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x09, 0x49, 0x73, 0x53, 0x75, 0x63, 0x63,
	0x65, 0x73, 0x73, 0x22, 0x30, 0x0a, 0x14, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x50, 0x61, 0x79,
	0x6d, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x18, 0x0a, 0x07, 0x70,
	0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x07, 0x70, 0x61,
	0x79, 0x6d, 0x65, 0x6e, 0x74, 0x22, 0x9e, 0x01, 0x0a, 0x17, 0x47, 0x65, 0x74, 0x50, 0x61, 0x79,
	0x6d, 0x65, 0x6e, 0x74, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x12, 0x47, 0x0a, 0x07, 0x70, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x18, 0x01, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x2d, 0x2e, 0x70, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x2e, 0x47, 0x65, 0x74,
	0x50, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x2e, 0x50, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x45, 0x6e, 0x74, 0x72,
	0x79, 0x52, 0x07, 0x70, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x1a, 0x3a, 0x0a, 0x0c, 0x50, 0x61,
	0x79, 0x6d, 0x65, 0x6e, 0x74, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65,
	0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05,
	0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c,
	0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0x5c, 0x0a, 0x1a, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65,
	0x52, 0x65, 0x63, 0x65, 0x69, 0x70, 0x74, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x12, 0x18, 0x0a, 0x07, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x49, 0x64, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x49, 0x64, 0x12, 0x24,
	0x0a, 0x0d, 0x52, 0x65, 0x63, 0x65, 0x69, 0x70, 0x74, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x52, 0x65, 0x63, 0x65, 0x69, 0x70, 0x74, 0x4e, 0x75,
	0x6d, 0x62, 0x65, 0x72, 0x22, 0x8c, 0x02, 0x0a, 0x16, 0x47, 0x65, 0x74, 0x50, 0x61, 0x79, 0x6d,
	0x65, 0x6e, 0x74, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12,
	0x20, 0x0a, 0x0b, 0x47, 0x72, 0x6f, 0x73, 0x73, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x03, 0x52, 0x0b, 0x47, 0x72, 0x6f, 0x73, 0x73, 0x41, 0x6d, 0x6f, 0x75, 0x6e,
	0x74, 0x12, 0x14, 0x0a, 0x05, 0x49, 0x74, 0x65, 0x6d, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x09,
	0x52, 0x05, 0x49, 0x74, 0x65, 0x6d, 0x73, 0x12, 0x16, 0x0a, 0x06, 0x55, 0x73, 0x65, 0x72, 0x49,
	0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x06, 0x55, 0x73, 0x65, 0x72, 0x49, 0x64, 0x12,
	0x22, 0x0a, 0x0c, 0x43, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x65, 0x72, 0x4e, 0x61, 0x6d, 0x65, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x43, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x65, 0x72, 0x4e,
	0x61, 0x6d, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x05,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x12, 0x18, 0x0a,
	0x07, 0x43, 0x6f, 0x75, 0x72, 0x69, 0x65, 0x72, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07,
	0x43, 0x6f, 0x75, 0x72, 0x69, 0x65, 0x72, 0x12, 0x26, 0x0a, 0x0e, 0x43, 0x6f, 0x75, 0x72, 0x69,
	0x65, 0x72, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0e, 0x43, 0x6f, 0x75, 0x72, 0x69, 0x65, 0x72, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x12,
	0x22, 0x0a, 0x0c, 0x53, 0x68, 0x69, 0x70, 0x70, 0x69, 0x6e, 0x67, 0x43, 0x6f, 0x73, 0x74, 0x18,
	0x08, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0c, 0x53, 0x68, 0x69, 0x70, 0x70, 0x69, 0x6e, 0x67, 0x43,
	0x6f, 0x73, 0x74, 0x32, 0xbc, 0x04, 0x0a, 0x0e, 0x50, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x53,
	0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x12, 0x3f, 0x0a, 0x07, 0x46, 0x69, 0x6e, 0x64, 0x41, 0x6c,
	0x6c, 0x12, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x1a, 0x1c, 0x2e, 0x70, 0x61, 0x79, 0x6d,
	0x65, 0x6e, 0x74, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x50, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x53, 0x0a, 0x0f, 0x46, 0x69, 0x6e, 0x64, 0x41,
	0x6c, 0x6c, 0x42, 0x79, 0x55, 0x73, 0x65, 0x72, 0x49, 0x64, 0x12, 0x22, 0x2e, 0x70, 0x61, 0x79,
	0x6d, 0x65, 0x6e, 0x74, 0x2e, 0x47, 0x65, 0x74, 0x50, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x42,
	0x79, 0x55, 0x73, 0x65, 0x72, 0x49, 0x64, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1c,
	0x2e, 0x70, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x50, 0x61, 0x79,
	0x6d, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x51, 0x0a, 0x0d,
	0x46, 0x69, 0x6e, 0x64, 0x42, 0x79, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x49, 0x64, 0x12, 0x23, 0x2e,
	0x70, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x2e, 0x47, 0x65, 0x74, 0x50, 0x61, 0x79, 0x6d, 0x65,
	0x6e, 0x74, 0x42, 0x79, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x49, 0x64, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x1a, 0x1b, 0x2e, 0x70, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x2e, 0x47, 0x65, 0x74,
	0x50, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12,
	0x52, 0x0a, 0x0e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x4f, 0x72, 0x55, 0x70, 0x64, 0x61, 0x74,
	0x65, 0x12, 0x1d, 0x2e, 0x70, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x2e, 0x43, 0x72, 0x65, 0x61,
	0x74, 0x65, 0x50, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x1a, 0x21, 0x2e, 0x70, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x2e, 0x47, 0x65, 0x74, 0x43, 0x72,
	0x65, 0x61, 0x74, 0x65, 0x50, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x12, 0x57, 0x0a, 0x13, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x52, 0x65, 0x63,
	0x65, 0x69, 0x70, 0x74, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x12, 0x23, 0x2e, 0x70, 0x61, 0x79,
	0x6d, 0x65, 0x6e, 0x74, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x52, 0x65, 0x63, 0x65, 0x69,
	0x70, 0x74, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a,
	0x1b, 0x2e, 0x70, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x2e, 0x47, 0x65, 0x74, 0x50, 0x61, 0x79,
	0x6d, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x45, 0x0a, 0x06,
	0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x12, 0x23, 0x2e, 0x70, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74,
	0x2e, 0x47, 0x65, 0x74, 0x50, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x42, 0x79, 0x4f, 0x72, 0x64,
	0x65, 0x72, 0x49, 0x64, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x16, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d,
	0x70, 0x74, 0x79, 0x12, 0x4d, 0x0a, 0x08, 0x47, 0x65, 0x74, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x12,
	0x1f, 0x2e, 0x70, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x2e, 0x47, 0x65, 0x74, 0x50, 0x61, 0x79,
	0x6d, 0x65, 0x6e, 0x74, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x1a, 0x20, 0x2e, 0x70, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x2e, 0x47, 0x65, 0x74, 0x50, 0x61,
	0x79, 0x6d, 0x65, 0x6e, 0x74, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x42, 0x1a, 0x5a, 0x18, 0x2e, 0x2f, 0x61, 0x64, 0x61, 0x70, 0x74, 0x65, 0x72, 0x2f,
	0x70, 0x6b, 0x67, 0x2f, 0x70, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x2f, 0x70, 0x62, 0x62, 0x06,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_adapter_pkg_payment_pb_payment_proto_rawDescOnce sync.Once
	file_adapter_pkg_payment_pb_payment_proto_rawDescData = file_adapter_pkg_payment_pb_payment_proto_rawDesc
)

func file_adapter_pkg_payment_pb_payment_proto_rawDescGZIP() []byte {
	file_adapter_pkg_payment_pb_payment_proto_rawDescOnce.Do(func() {
		file_adapter_pkg_payment_pb_payment_proto_rawDescData = protoimpl.X.CompressGZIP(file_adapter_pkg_payment_pb_payment_proto_rawDescData)
	})
	return file_adapter_pkg_payment_pb_payment_proto_rawDescData
}

var file_adapter_pkg_payment_pb_payment_proto_msgTypes = make([]protoimpl.MessageInfo, 11)
var file_adapter_pkg_payment_pb_payment_proto_goTypes = []interface{}{
	(*Payment)(nil),                    // 0: payment.Payment
	(*ListPaymentResponse)(nil),        // 1: payment.ListPaymentResponse
	(*GetPaymentResponse)(nil),         // 2: payment.GetPaymentResponse
	(*GetPaymentByUserIdRequest)(nil),  // 3: payment.GetPaymentByUserIdRequest
	(*GetPaymentByOrderIdRequest)(nil), // 4: payment.GetPaymentByOrderIdRequest
	(*GetCreatePaymentResponse)(nil),   // 5: payment.GetCreatePaymentResponse
	(*CreatePaymentRequest)(nil),       // 6: payment.CreatePaymentRequest
	(*GetPaymentTokenResponse)(nil),    // 7: payment.GetPaymentTokenResponse
	(*UpdateReceiptNumberRequest)(nil), // 8: payment.UpdateReceiptNumberRequest
	(*GetPaymentTokenRequest)(nil),     // 9: payment.GetPaymentTokenRequest
	nil,                                // 10: payment.GetPaymentTokenResponse.PaymentEntry
	(*emptypb.Empty)(nil),              // 11: google.protobuf.Empty
}
var file_adapter_pkg_payment_pb_payment_proto_depIdxs = []int32{
	0,  // 0: payment.ListPaymentResponse.payment:type_name -> payment.Payment
	0,  // 1: payment.GetPaymentResponse.payment:type_name -> payment.Payment
	10, // 2: payment.GetPaymentTokenResponse.payment:type_name -> payment.GetPaymentTokenResponse.PaymentEntry
	11, // 3: payment.PaymentService.FindAll:input_type -> google.protobuf.Empty
	3,  // 4: payment.PaymentService.FindAllByUserId:input_type -> payment.GetPaymentByUserIdRequest
	4,  // 5: payment.PaymentService.FindByOrderId:input_type -> payment.GetPaymentByOrderIdRequest
	6,  // 6: payment.PaymentService.CreateOrUpdate:input_type -> payment.CreatePaymentRequest
	8,  // 7: payment.PaymentService.UpdateReceiptNumber:input_type -> payment.UpdateReceiptNumberRequest
	4,  // 8: payment.PaymentService.Delete:input_type -> payment.GetPaymentByOrderIdRequest
	9,  // 9: payment.PaymentService.GetToken:input_type -> payment.GetPaymentTokenRequest
	1,  // 10: payment.PaymentService.FindAll:output_type -> payment.ListPaymentResponse
	1,  // 11: payment.PaymentService.FindAllByUserId:output_type -> payment.ListPaymentResponse
	2,  // 12: payment.PaymentService.FindByOrderId:output_type -> payment.GetPaymentResponse
	5,  // 13: payment.PaymentService.CreateOrUpdate:output_type -> payment.GetCreatePaymentResponse
	2,  // 14: payment.PaymentService.UpdateReceiptNumber:output_type -> payment.GetPaymentResponse
	11, // 15: payment.PaymentService.Delete:output_type -> google.protobuf.Empty
	7,  // 16: payment.PaymentService.GetToken:output_type -> payment.GetPaymentTokenResponse
	10, // [10:17] is the sub-list for method output_type
	3,  // [3:10] is the sub-list for method input_type
	3,  // [3:3] is the sub-list for extension type_name
	3,  // [3:3] is the sub-list for extension extendee
	0,  // [0:3] is the sub-list for field type_name
}

func init() { file_adapter_pkg_payment_pb_payment_proto_init() }
func file_adapter_pkg_payment_pb_payment_proto_init() {
	if File_adapter_pkg_payment_pb_payment_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_adapter_pkg_payment_pb_payment_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Payment); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_adapter_pkg_payment_pb_payment_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListPaymentResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_adapter_pkg_payment_pb_payment_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetPaymentResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_adapter_pkg_payment_pb_payment_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetPaymentByUserIdRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_adapter_pkg_payment_pb_payment_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetPaymentByOrderIdRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_adapter_pkg_payment_pb_payment_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetCreatePaymentResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_adapter_pkg_payment_pb_payment_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreatePaymentRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_adapter_pkg_payment_pb_payment_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetPaymentTokenResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_adapter_pkg_payment_pb_payment_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateReceiptNumberRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_adapter_pkg_payment_pb_payment_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetPaymentTokenRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	file_adapter_pkg_payment_pb_payment_proto_msgTypes[0].OneofWrappers = []interface{}{}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_adapter_pkg_payment_pb_payment_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   11,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_adapter_pkg_payment_pb_payment_proto_goTypes,
		DependencyIndexes: file_adapter_pkg_payment_pb_payment_proto_depIdxs,
		MessageInfos:      file_adapter_pkg_payment_pb_payment_proto_msgTypes,
	}.Build()
	File_adapter_pkg_payment_pb_payment_proto = out.File
	file_adapter_pkg_payment_pb_payment_proto_rawDesc = nil
	file_adapter_pkg_payment_pb_payment_proto_goTypes = nil
	file_adapter_pkg_payment_pb_payment_proto_depIdxs = nil
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConnInterface

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion6

// PaymentServiceClient is the client API for PaymentService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type PaymentServiceClient interface {
	FindAll(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*ListPaymentResponse, error)
	FindAllByUserId(ctx context.Context, in *GetPaymentByUserIdRequest, opts ...grpc.CallOption) (*ListPaymentResponse, error)
	FindByOrderId(ctx context.Context, in *GetPaymentByOrderIdRequest, opts ...grpc.CallOption) (*GetPaymentResponse, error)
	CreateOrUpdate(ctx context.Context, in *CreatePaymentRequest, opts ...grpc.CallOption) (*GetCreatePaymentResponse, error)
	UpdateReceiptNumber(ctx context.Context, in *UpdateReceiptNumberRequest, opts ...grpc.CallOption) (*GetPaymentResponse, error)
	Delete(ctx context.Context, in *GetPaymentByOrderIdRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	GetToken(ctx context.Context, in *GetPaymentTokenRequest, opts ...grpc.CallOption) (*GetPaymentTokenResponse, error)
}

type paymentServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewPaymentServiceClient(cc grpc.ClientConnInterface) PaymentServiceClient {
	return &paymentServiceClient{cc}
}

func (c *paymentServiceClient) FindAll(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*ListPaymentResponse, error) {
	out := new(ListPaymentResponse)
	err := c.cc.Invoke(ctx, "/payment.PaymentService/FindAll", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *paymentServiceClient) FindAllByUserId(ctx context.Context, in *GetPaymentByUserIdRequest, opts ...grpc.CallOption) (*ListPaymentResponse, error) {
	out := new(ListPaymentResponse)
	err := c.cc.Invoke(ctx, "/payment.PaymentService/FindAllByUserId", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *paymentServiceClient) FindByOrderId(ctx context.Context, in *GetPaymentByOrderIdRequest, opts ...grpc.CallOption) (*GetPaymentResponse, error) {
	out := new(GetPaymentResponse)
	err := c.cc.Invoke(ctx, "/payment.PaymentService/FindByOrderId", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *paymentServiceClient) CreateOrUpdate(ctx context.Context, in *CreatePaymentRequest, opts ...grpc.CallOption) (*GetCreatePaymentResponse, error) {
	out := new(GetCreatePaymentResponse)
	err := c.cc.Invoke(ctx, "/payment.PaymentService/CreateOrUpdate", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *paymentServiceClient) UpdateReceiptNumber(ctx context.Context, in *UpdateReceiptNumberRequest, opts ...grpc.CallOption) (*GetPaymentResponse, error) {
	out := new(GetPaymentResponse)
	err := c.cc.Invoke(ctx, "/payment.PaymentService/UpdateReceiptNumber", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *paymentServiceClient) Delete(ctx context.Context, in *GetPaymentByOrderIdRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/payment.PaymentService/Delete", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *paymentServiceClient) GetToken(ctx context.Context, in *GetPaymentTokenRequest, opts ...grpc.CallOption) (*GetPaymentTokenResponse, error) {
	out := new(GetPaymentTokenResponse)
	err := c.cc.Invoke(ctx, "/payment.PaymentService/GetToken", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// PaymentServiceServer is the server API for PaymentService service.
type PaymentServiceServer interface {
	FindAll(context.Context, *emptypb.Empty) (*ListPaymentResponse, error)
	FindAllByUserId(context.Context, *GetPaymentByUserIdRequest) (*ListPaymentResponse, error)
	FindByOrderId(context.Context, *GetPaymentByOrderIdRequest) (*GetPaymentResponse, error)
	CreateOrUpdate(context.Context, *CreatePaymentRequest) (*GetCreatePaymentResponse, error)
	UpdateReceiptNumber(context.Context, *UpdateReceiptNumberRequest) (*GetPaymentResponse, error)
	Delete(context.Context, *GetPaymentByOrderIdRequest) (*emptypb.Empty, error)
	GetToken(context.Context, *GetPaymentTokenRequest) (*GetPaymentTokenResponse, error)
}

// UnimplementedPaymentServiceServer can be embedded to have forward compatible implementations.
type UnimplementedPaymentServiceServer struct {
}

func (*UnimplementedPaymentServiceServer) FindAll(context.Context, *emptypb.Empty) (*ListPaymentResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FindAll not implemented")
}
func (*UnimplementedPaymentServiceServer) FindAllByUserId(context.Context, *GetPaymentByUserIdRequest) (*ListPaymentResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FindAllByUserId not implemented")
}
func (*UnimplementedPaymentServiceServer) FindByOrderId(context.Context, *GetPaymentByOrderIdRequest) (*GetPaymentResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FindByOrderId not implemented")
}
func (*UnimplementedPaymentServiceServer) CreateOrUpdate(context.Context, *CreatePaymentRequest) (*GetCreatePaymentResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateOrUpdate not implemented")
}
func (*UnimplementedPaymentServiceServer) UpdateReceiptNumber(context.Context, *UpdateReceiptNumberRequest) (*GetPaymentResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateReceiptNumber not implemented")
}
func (*UnimplementedPaymentServiceServer) Delete(context.Context, *GetPaymentByOrderIdRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Delete not implemented")
}
func (*UnimplementedPaymentServiceServer) GetToken(context.Context, *GetPaymentTokenRequest) (*GetPaymentTokenResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetToken not implemented")
}

func RegisterPaymentServiceServer(s *grpc.Server, srv PaymentServiceServer) {
	s.RegisterService(&_PaymentService_serviceDesc, srv)
}

func _PaymentService_FindAll_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(emptypb.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PaymentServiceServer).FindAll(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/payment.PaymentService/FindAll",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PaymentServiceServer).FindAll(ctx, req.(*emptypb.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _PaymentService_FindAllByUserId_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetPaymentByUserIdRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PaymentServiceServer).FindAllByUserId(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/payment.PaymentService/FindAllByUserId",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PaymentServiceServer).FindAllByUserId(ctx, req.(*GetPaymentByUserIdRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PaymentService_FindByOrderId_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetPaymentByOrderIdRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PaymentServiceServer).FindByOrderId(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/payment.PaymentService/FindByOrderId",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PaymentServiceServer).FindByOrderId(ctx, req.(*GetPaymentByOrderIdRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PaymentService_CreateOrUpdate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreatePaymentRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PaymentServiceServer).CreateOrUpdate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/payment.PaymentService/CreateOrUpdate",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PaymentServiceServer).CreateOrUpdate(ctx, req.(*CreatePaymentRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PaymentService_UpdateReceiptNumber_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateReceiptNumberRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PaymentServiceServer).UpdateReceiptNumber(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/payment.PaymentService/UpdateReceiptNumber",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PaymentServiceServer).UpdateReceiptNumber(ctx, req.(*UpdateReceiptNumberRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PaymentService_Delete_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetPaymentByOrderIdRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PaymentServiceServer).Delete(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/payment.PaymentService/Delete",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PaymentServiceServer).Delete(ctx, req.(*GetPaymentByOrderIdRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PaymentService_GetToken_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetPaymentTokenRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PaymentServiceServer).GetToken(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/payment.PaymentService/GetToken",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PaymentServiceServer).GetToken(ctx, req.(*GetPaymentTokenRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _PaymentService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "payment.PaymentService",
	HandlerType: (*PaymentServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "FindAll",
			Handler:    _PaymentService_FindAll_Handler,
		},
		{
			MethodName: "FindAllByUserId",
			Handler:    _PaymentService_FindAllByUserId_Handler,
		},
		{
			MethodName: "FindByOrderId",
			Handler:    _PaymentService_FindByOrderId_Handler,
		},
		{
			MethodName: "CreateOrUpdate",
			Handler:    _PaymentService_CreateOrUpdate_Handler,
		},
		{
			MethodName: "UpdateReceiptNumber",
			Handler:    _PaymentService_UpdateReceiptNumber_Handler,
		},
		{
			MethodName: "Delete",
			Handler:    _PaymentService_Delete_Handler,
		},
		{
			MethodName: "GetToken",
			Handler:    _PaymentService_GetToken_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "adapter/pkg/payment/pb/payment.proto",
}
